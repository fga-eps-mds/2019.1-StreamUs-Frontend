{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _jsxFileName = \"src/basic/Tabs/index.js\";\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _createReactClass = require(\"create-react-class\");\n\nvar _createReactClass2 = _interopRequireDefault(_createReactClass);\n\nvar _lodash = require(\"lodash\");\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _utils = require(\"../../utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar React = require(\"react\");\n\nvar Component = React.Component;\n\nvar ReactNative = require(\"react-native\");\n\nvar Dimensions = ReactNative.Dimensions,\n    View = ReactNative.View,\n    Animated = ReactNative.Animated,\n    ScrollView = ReactNative.ScrollView,\n    StyleSheet = ReactNative.StyleSheet,\n    Platform = ReactNative.Platform;\n\nvar TimerMixin = require(\"react-timer-mixin\");\n\nvar SceneComponent = require(\"./SceneComponent\");\n\nvar _require = require(\"./DefaultTabBar\"),\n    DefaultTabBar = _require.DefaultTabBar;\n\nvar _require2 = require(\"./ScrollableTabBar\"),\n    ScrollableTabBar = _require2.ScrollableTabBar;\n\nvar ScrollableTabView = (0, _createReactClass2.default)({\n  displayName: \"ScrollableTabView\",\n  mixins: [TimerMixin],\n  statics: {\n    DefaultTabBar: DefaultTabBar,\n    ScrollableTabBar: ScrollableTabBar\n  },\n  propTypes: {\n    tabBarPosition: _propTypes2.default.oneOf([\"top\", \"bottom\", \"overlayTop\", \"overlayBottom\"]),\n    initialPage: _propTypes2.default.number,\n    page: _propTypes2.default.number,\n    onChangeTab: _propTypes2.default.func,\n    onScroll: _propTypes2.default.func,\n    renderTabBar: _propTypes2.default.any,\n    style: _utils.ViewPropTypes.style,\n    contentProps: _propTypes2.default.object,\n    scrollWithoutAnimation: _propTypes2.default.bool,\n    locked: _propTypes2.default.bool,\n    prerenderingSiblingsNumber: _propTypes2.default.number\n  },\n  getDefaultProps: function getDefaultProps() {\n    return {\n      tabBarPosition: \"top\",\n      initialPage: 0,\n      page: -1,\n      onChangeTab: function onChangeTab() {},\n      onScroll: function onScroll() {},\n      contentProps: {},\n      scrollWithoutAnimation: false,\n      locked: false,\n      prerenderingSiblingsNumber: 0\n    };\n  },\n  getInitialState: function getInitialState() {\n    return {\n      currentPage: this.props.initialPage,\n      scrollValue: new Animated.Value(this.props.initialPage),\n      containerWidth: Dimensions.get(\"window\").width,\n      sceneKeys: this.newSceneKeys({\n        currentPage: this.props.initialPage\n      })\n    };\n  },\n  componentDidMount: function componentDidMount() {\n    var _this = this;\n\n    var scrollFn = function scrollFn() {\n      if (_this.scrollView) {\n        _this.state.scrollValue.setValue(_this.props.initialPage);\n      }\n    };\n\n    _utils.InteractionManager.runAfterInteractions(scrollFn);\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(props) {\n    if (props.children !== this.props.children) {\n      this.updateSceneKeys({\n        page: this.state.currentPage,\n        children: props.children\n      });\n    }\n\n    if (props.page >= 0 && props.page !== this.state.currentPage) {\n      this.goToPage(props.page);\n    }\n  },\n  goToPage: function goToPage(pageNumber) {\n    var offset = pageNumber * this.state.containerWidth;\n\n    if (this.scrollView) {\n      this.scrollView.scrollTo({\n        x: offset,\n        y: 0,\n        animated: !this.props.scrollWithoutAnimation\n      });\n    }\n\n    var currentPage = this.state.currentPage;\n    this.updateSceneKeys({\n      page: pageNumber,\n      callback: this._onChangeTab.bind(this, currentPage, pageNumber)\n    });\n  },\n  renderTabBar: function renderTabBar(props) {\n    if (this.props.renderTabBar === false) {\n      return null;\n    } else if (this.props.renderTabBar) {\n      return React.cloneElement(this.props.renderTabBar(props), props);\n    } else {\n      return React.createElement(DefaultTabBar, _extends({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        }\n      }));\n    }\n  },\n  updateSceneKeys: function updateSceneKeys(_ref) {\n    var page = _ref.page,\n        _ref$children = _ref.children,\n        children = _ref$children === undefined ? this.props.children : _ref$children,\n        _ref$callback = _ref.callback,\n        callback = _ref$callback === undefined ? function () {} : _ref$callback;\n    var newKeys = this.newSceneKeys({\n      previousKeys: this.state.sceneKeys,\n      currentPage: page,\n      children: children\n    });\n    this.setState({\n      currentPage: page,\n      sceneKeys: newKeys\n    }, callback);\n  },\n  newSceneKeys: function newSceneKeys(_ref2) {\n    var _this2 = this;\n\n    var _ref2$previousKeys = _ref2.previousKeys,\n        previousKeys = _ref2$previousKeys === undefined ? [] : _ref2$previousKeys,\n        _ref2$currentPage = _ref2.currentPage,\n        currentPage = _ref2$currentPage === undefined ? 0 : _ref2$currentPage,\n        _ref2$children = _ref2.children,\n        children = _ref2$children === undefined ? this.props.children : _ref2$children;\n    var newKeys = [];\n\n    this._children(children).forEach(function (child, idx) {\n      var key = _this2._makeSceneKey(child, idx);\n\n      if (_this2._keyExists(previousKeys, key) || _this2._shouldRenderSceneKey(idx, currentPage)) {\n        newKeys.push(key);\n      }\n    });\n\n    return newKeys;\n  },\n  _shouldRenderSceneKey: function _shouldRenderSceneKey(idx, currentPageKey) {\n    var numOfSibling = this.props.prerenderingSiblingsNumber;\n    return idx < currentPageKey + numOfSibling + 1 && idx > currentPageKey - numOfSibling - 1;\n  },\n  _keyExists: function _keyExists(sceneKeys, key) {\n    return sceneKeys.find(function (sceneKey) {\n      return key === sceneKey;\n    });\n  },\n  _makeSceneKey: function _makeSceneKey(child, idx) {\n    return child.props.heading + \"_\" + idx;\n  },\n  renderScrollableContent: function renderScrollableContent() {\n    var _this3 = this;\n\n    var scenes = this._composeScenes();\n\n    return React.createElement(ScrollView, _extends({\n      horizontal: true,\n      pagingEnabled: true,\n      automaticallyAdjustContentInsets: false,\n      keyboardShouldPersistTaps: \"handled\",\n      contentOffset: {\n        x: this.props.initialPage * this.state.containerWidth\n      },\n      ref: function ref(scrollView) {\n        _this3.scrollView = scrollView;\n      },\n      onScroll: function onScroll(e) {\n        var offsetX = e.nativeEvent.contentOffset.x;\n\n        _this3._updateScrollValue(offsetX / _this3.state.containerWidth);\n      },\n      onMomentumScrollBegin: this._onMomentumScrollBeginAndEnd,\n      onMomentumScrollEnd: this._onMomentumScrollBeginAndEnd,\n      scrollEventThrottle: 16,\n      scrollsToTop: false,\n      showsHorizontalScrollIndicator: false,\n      scrollEnabled: !this.props.locked,\n      directionalLockEnabled: true,\n      alwaysBounceVertical: false,\n      keyboardDismissMode: \"on-drag\"\n    }, this.props.contentProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      }\n    }), scenes);\n  },\n  _composeScenes: function _composeScenes() {\n    var _this4 = this;\n\n    return this._children().map(function (child, idx) {\n      var key = _this4._makeSceneKey(child, idx);\n\n      return React.createElement(SceneComponent, {\n        key: child.key,\n        shouldUpdated: _this4._shouldRenderSceneKey(idx, _this4.state.currentPage),\n        style: {\n          width: _this4.state.containerWidth\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        }\n      }, _this4._keyExists(_this4.state.sceneKeys, key) ? child : React.createElement(View, {\n        heading: child.props.heading,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        }\n      }));\n    });\n  },\n  _onMomentumScrollBeginAndEnd: function _onMomentumScrollBeginAndEnd(e) {\n    var offsetX = e.nativeEvent.contentOffset.x;\n    var page = Math.round(offsetX / this.state.containerWidth);\n\n    if (this.state.currentPage !== page) {\n      this._updateSelectedPage(page);\n    }\n  },\n  _updateSelectedPage: function _updateSelectedPage(nextPage) {\n    var localNextPage = nextPage;\n\n    if (typeof localNextPage === \"object\") {\n      localNextPage = nextPage.nativeEvent.position;\n    }\n\n    var currentPage = this.state.currentPage;\n    this.updateSceneKeys({\n      page: localNextPage,\n      callback: this._onChangeTab.bind(this, currentPage, localNextPage)\n    });\n  },\n  _onChangeTab: function _onChangeTab(prevPage, currentPage) {\n    this.props.onChangeTab({\n      i: currentPage,\n      ref: this._children()[currentPage],\n      from: prevPage\n    });\n  },\n  _updateScrollValue: function _updateScrollValue(value) {\n    this.state.scrollValue.setValue(value);\n    this.props.onScroll(value);\n  },\n  _handleLayout: function _handleLayout(e) {\n    var _this5 = this;\n\n    var width = e.nativeEvent.layout.width;\n\n    if (!width || width <= 0 || Math.round(width) === Math.round(this.state.containerWidth)) {\n      return;\n    }\n\n    this.setState({\n      containerWidth: width\n    });\n    this.requestAnimationFrame(function () {\n      _this5.goToPage(_this5.state.currentPage);\n    });\n  },\n  _children: function _children() {\n    var children = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.children;\n    return React.Children.map(children, function (child) {\n      return child;\n    });\n  },\n  render: function render() {\n    var overlayTabs = this.props.tabBarPosition === \"overlayTop\" || this.props.tabBarPosition === \"overlayBottom\";\n    var tabBarProps = {\n      goToPage: this.goToPage,\n      tabs: this._children().map(function (child) {\n        return child.props.heading;\n      }),\n      tabStyle: this._children().map(function (child) {\n        return child.props.tabStyle;\n      }),\n      activeTabStyle: this._children().map(function (child) {\n        return child.props.activeTabStyle;\n      }),\n      textStyle: this._children().map(function (child) {\n        return child.props.textStyle;\n      }),\n      activeTextStyle: this._children().map(function (child) {\n        return child.props.activeTextStyle;\n      }),\n      tabHeaderStyle: this._children().map(function (child) {\n        return _lodash2.default.get(child.props.heading.props, \"style\", undefined);\n      }),\n      activeTab: this.state.currentPage,\n      scrollValue: this.state.scrollValue,\n      containerWidth: this.state.containerWidth\n    };\n\n    if (this.props.tabBarBackgroundColor) {\n      tabBarProps.backgroundColor = this.props.tabBarBackgroundColor;\n    }\n\n    if (this.props.tabBarActiveTextColor) {\n      tabBarProps.activeTextColor = this.props.tabBarActiveTextColor;\n    }\n\n    if (this.props.tabBarInactiveTextColor) {\n      tabBarProps.inactiveTextColor = this.props.tabBarInactiveTextColor;\n    }\n\n    if (this.props.tabBarTextStyle) {\n      tabBarProps.textStyle = this.props.tabBarTextStyle;\n    }\n\n    if (this.props.tabBarUnderlineStyle) {\n      tabBarProps.underlineStyle = this.props.tabBarUnderlineStyle;\n    }\n\n    if (this.props.tabContainerStyle) {\n      tabBarProps.tabContainerStyle = this.props.tabContainerStyle;\n    }\n\n    if (overlayTabs) {\n      var _tabBarProps$style;\n\n      tabBarProps.style = (_tabBarProps$style = {\n        position: \"absolute\",\n        left: 0,\n        right: 0\n      }, _defineProperty(_tabBarProps$style, this.props.tabBarPosition === \"overlayTop\" ? \"top\" : \"bottom\", 0), _defineProperty(_tabBarProps$style, \"backgroundColor\", \"rgba(255, 255, 255, 0.7)\"), _tabBarProps$style);\n    }\n\n    return React.createElement(View, {\n      style: [styles.container, this.props.style],\n      onLayout: this._handleLayout,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      }\n    }, (this.props.tabBarPosition === \"top\" || this.props.tabBarPosition === \"overlayTop\") && this.renderTabBar(tabBarProps), this.renderScrollableContent(), (this.props.tabBarPosition === \"bottom\" || this.props.tabBarPosition === \"overlayBottom\") && this.renderTabBar(tabBarProps));\n  }\n});\nexports.default = ScrollableTabView;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  scrollableContentAndroid: {\n    flex: 1\n  }\n});","map":null,"metadata":{},"sourceType":"script"}