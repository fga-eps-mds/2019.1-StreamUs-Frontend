{"ast":null,"code":"import _objectSpread from \"/home/ygor/Documents/FGA/eps/2019.1-StreamUs-Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/home/ygor/Documents/FGA/eps/2019.1-StreamUs-Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ygor/Documents/FGA/eps/2019.1-StreamUs-Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/ygor/Documents/FGA/eps/2019.1-StreamUs-Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ygor/Documents/FGA/eps/2019.1-StreamUs-Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ygor/Documents/FGA/eps/2019.1-StreamUs-Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ygor/Documents/FGA/eps/2019.1-StreamUs-Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/ygor/Documents/FGA/eps/2019.1-StreamUs-Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/ygor/Documents/FGA/eps/2019.1-StreamUs-Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"/home/ygor/Documents/FGA/eps/2019.1-StreamUs-Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/ygor/Documents/FGA/eps/2019.1-StreamUs-Frontend/node_modules/react-native-vector-icons/lib/toolbar-android.js\";\n\n/* eslint-disable react/no-unused-prop-types */\nimport isEqual from 'lodash/isEqual';\nimport pick from 'lodash/pick';\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { ToolbarAndroid } from './react-native';\nvar ICON_PROP_NAMES = ['iconSize', 'iconColor', 'titleColor'];\nvar LOGO_ICON_PROP_NAMES = [].concat(ICON_PROP_NAMES, ['logoName']);\nvar NAV_ICON_PROP_NAMES = [].concat(ICON_PROP_NAMES, ['navIconName']);\nvar OVERFLOW_ICON_PROP_NAMES = [].concat(ICON_PROP_NAMES, ['overflowIconName']);\nvar ACTIONS_PROP_NAMES = [].concat(ICON_PROP_NAMES, ['actions']);\n\nvar arePropsEqual = function arePropsEqual(keys) {\n  return function (prevProps, nextProps) {\n    return isEqual(pick(prevProps, keys), pick(nextProps, keys));\n  };\n};\n\nvar areLogoIconPropsEqual = arePropsEqual(LOGO_ICON_PROP_NAMES);\nvar areNavIconPropsEqual = arePropsEqual(NAV_ICON_PROP_NAMES);\nvar areOverflowIconPropsEqual = arePropsEqual(OVERFLOW_ICON_PROP_NAMES);\nvar areActionPropsEqual = arePropsEqual(ACTIONS_PROP_NAMES);\nexport default function createToolbarAndroidComponent(IconNamePropType, getImageSource) {\n  var _class, _temp;\n\n  return _temp = _class =\n  /*#__PURE__*/\n  function (_PureComponent) {\n    _inherits(IconToolbarAndroid, _PureComponent);\n\n    function IconToolbarAndroid() {\n      var _getPrototypeOf2;\n\n      var _this;\n\n      _classCallCheck(this, IconToolbarAndroid);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(IconToolbarAndroid)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n      _defineProperty(_assertThisInitialized(_this), \"state\", {\n        logo: undefined,\n        navIcon: undefined,\n        overflowIcon: undefined,\n        actions: undefined\n      });\n\n      return _this;\n    }\n\n    _createClass(IconToolbarAndroid, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this.updateLogoIconSource();\n        this.updateNavIconSource();\n        this.updateOverflowIconSource();\n        this.updateActionIconSources();\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        if (!areLogoIconPropsEqual(prevProps, this.props)) {\n          this.updateLogoIconSource();\n        }\n\n        if (!areNavIconPropsEqual(prevProps, this.props)) {\n          this.updateNavIconSource();\n        }\n\n        if (!areOverflowIconPropsEqual(prevProps, this.props)) {\n          this.updateOverflowIconSource();\n        }\n\n        if (!areActionPropsEqual(prevProps, this.props)) {\n          this.updateActionIconSources();\n        }\n      }\n    }, {\n      key: \"updateLogoIconSource\",\n      value: function () {\n        var _updateLogoIconSource = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee() {\n          var _this$props, logoName, iconSize, iconColor, titleColor, logo;\n\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _this$props = this.props, logoName = _this$props.logoName, iconSize = _this$props.iconSize, iconColor = _this$props.iconColor, titleColor = _this$props.titleColor;\n\n                  if (!logoName) {\n                    _context.next = 8;\n                    break;\n                  }\n\n                  _context.next = 4;\n                  return getImageSource(logoName, iconSize, iconColor || titleColor);\n\n                case 4:\n                  logo = _context.sent;\n                  this.setState({\n                    logo: logo\n                  }); // eslint-disable-next-line react/destructuring-assignment\n\n                  _context.next = 9;\n                  break;\n\n                case 8:\n                  if (this.state.logo) {\n                    this.setState({\n                      logo: undefined\n                    });\n                  }\n\n                case 9:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n\n        function updateLogoIconSource() {\n          return _updateLogoIconSource.apply(this, arguments);\n        }\n\n        return updateLogoIconSource;\n      }()\n    }, {\n      key: \"updateNavIconSource\",\n      value: function () {\n        var _updateNavIconSource = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee2() {\n          var _this$props2, navIconName, iconSize, iconColor, titleColor, navIcon;\n\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _this$props2 = this.props, navIconName = _this$props2.navIconName, iconSize = _this$props2.iconSize, iconColor = _this$props2.iconColor, titleColor = _this$props2.titleColor;\n\n                  if (!navIconName) {\n                    _context2.next = 8;\n                    break;\n                  }\n\n                  _context2.next = 4;\n                  return getImageSource(navIconName, iconSize, iconColor || titleColor);\n\n                case 4:\n                  navIcon = _context2.sent;\n                  this.setState({\n                    navIcon: navIcon\n                  }); // eslint-disable-next-line react/destructuring-assignment\n\n                  _context2.next = 9;\n                  break;\n\n                case 8:\n                  if (this.state.navIcon) {\n                    this.setState({\n                      navIcon: undefined\n                    });\n                  }\n\n                case 9:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n\n        function updateNavIconSource() {\n          return _updateNavIconSource.apply(this, arguments);\n        }\n\n        return updateNavIconSource;\n      }()\n    }, {\n      key: \"updateOverflowIconSource\",\n      value: function () {\n        var _updateOverflowIconSource = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee3() {\n          var _this$props3, overflowIconName, iconSize, iconColor, titleColor, overflowIcon;\n\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _this$props3 = this.props, overflowIconName = _this$props3.overflowIconName, iconSize = _this$props3.iconSize, iconColor = _this$props3.iconColor, titleColor = _this$props3.titleColor;\n\n                  if (!overflowIconName) {\n                    _context3.next = 8;\n                    break;\n                  }\n\n                  _context3.next = 4;\n                  return getImageSource(overflowIconName, iconSize, iconColor || titleColor);\n\n                case 4:\n                  overflowIcon = _context3.sent;\n                  this.setState({\n                    overflowIcon: overflowIcon\n                  }); // eslint-disable-next-line react/destructuring-assignment\n\n                  _context3.next = 9;\n                  break;\n\n                case 8:\n                  if (this.state.overflowIcon) {\n                    this.setState({\n                      overflowIcon: undefined\n                    });\n                  }\n\n                case 9:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, this);\n        }));\n\n        function updateOverflowIconSource() {\n          return _updateOverflowIconSource.apply(this, arguments);\n        }\n\n        return updateOverflowIconSource;\n      }()\n    }, {\n      key: \"updateActionIconSources\",\n      value: function () {\n        var _updateActionIconSources = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee4() {\n          var _this$props4, actions, iconSize, iconColor, titleColor, updatedActions;\n\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _this$props4 = this.props, actions = _this$props4.actions, iconSize = _this$props4.iconSize, iconColor = _this$props4.iconColor, titleColor = _this$props4.titleColor;\n                  _context4.next = 3;\n                  return Promise.all((actions || []).map(function (action) {\n                    if (action.iconName) {\n                      return getImageSource(action.iconName, action.iconSize || iconSize, action.iconColor || iconColor || titleColor).then(function (icon) {\n                        return _objectSpread({}, action, {\n                          icon: icon\n                        });\n                      });\n                    }\n\n                    return Promise.resolve(action);\n                  }));\n\n                case 3:\n                  updatedActions = _context4.sent;\n                  this.setState({\n                    actions: updatedActions\n                  });\n\n                case 5:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4, this);\n        }));\n\n        function updateActionIconSources() {\n          return _updateActionIconSources.apply(this, arguments);\n        }\n\n        return updateActionIconSources;\n      }()\n    }, {\n      key: \"render\",\n      value: function render() {\n        return React.createElement(ToolbarAndroid, Object.assign({}, this.props, this.state, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        }));\n      }\n    }]);\n\n    return IconToolbarAndroid;\n  }(PureComponent), _defineProperty(_class, \"propTypes\", {\n    logoName: IconNamePropType,\n    navIconName: IconNamePropType,\n    overflowIconName: IconNamePropType,\n    actions: PropTypes.arrayOf(PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      iconName: IconNamePropType,\n      iconSize: PropTypes.number,\n      iconColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      show: PropTypes.oneOf(['always', 'ifRoom', 'never']),\n      showWithText: PropTypes.bool\n    })),\n    iconSize: PropTypes.number,\n    iconColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    titleColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n  }), _defineProperty(_class, \"defaultProps\", {\n    iconSize: 24\n  }), _temp;\n}","map":{"version":3,"sources":["/home/ygor/Documents/FGA/eps/2019.1-StreamUs-Frontend/node_modules/react-native-vector-icons/lib/toolbar-android.js"],"names":["isEqual","pick","React","PureComponent","PropTypes","ToolbarAndroid","ICON_PROP_NAMES","LOGO_ICON_PROP_NAMES","NAV_ICON_PROP_NAMES","OVERFLOW_ICON_PROP_NAMES","ACTIONS_PROP_NAMES","arePropsEqual","keys","prevProps","nextProps","areLogoIconPropsEqual","areNavIconPropsEqual","areOverflowIconPropsEqual","areActionPropsEqual","createToolbarAndroidComponent","IconNamePropType","getImageSource","logo","undefined","navIcon","overflowIcon","actions","updateLogoIconSource","updateNavIconSource","updateOverflowIconSource","updateActionIconSources","props","logoName","iconSize","iconColor","titleColor","setState","state","navIconName","overflowIconName","Promise","all","map","action","iconName","then","icon","resolve","updatedActions","arrayOf","shape","title","string","isRequired","number","oneOfType","show","oneOf","showWithText","bool"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-unused-prop-types */\nimport isEqual from 'lodash/isEqual';\nimport pick from 'lodash/pick';\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { ToolbarAndroid } from './react-native';\n\nconst ICON_PROP_NAMES = ['iconSize', 'iconColor', 'titleColor'];\nconst LOGO_ICON_PROP_NAMES = [...ICON_PROP_NAMES, 'logoName'];\nconst NAV_ICON_PROP_NAMES = [...ICON_PROP_NAMES, 'navIconName'];\nconst OVERFLOW_ICON_PROP_NAMES = [...ICON_PROP_NAMES, 'overflowIconName'];\nconst ACTIONS_PROP_NAMES = [...ICON_PROP_NAMES, 'actions'];\n\nconst arePropsEqual = keys => (prevProps, nextProps) =>\n  isEqual(pick(prevProps, keys), pick(nextProps, keys));\n\nconst areLogoIconPropsEqual = arePropsEqual(LOGO_ICON_PROP_NAMES);\nconst areNavIconPropsEqual = arePropsEqual(NAV_ICON_PROP_NAMES);\nconst areOverflowIconPropsEqual = arePropsEqual(OVERFLOW_ICON_PROP_NAMES);\nconst areActionPropsEqual = arePropsEqual(ACTIONS_PROP_NAMES);\n\nexport default function createToolbarAndroidComponent(\n  IconNamePropType,\n  getImageSource\n) {\n  return class IconToolbarAndroid extends PureComponent {\n    static propTypes = {\n      logoName: IconNamePropType,\n      navIconName: IconNamePropType,\n      overflowIconName: IconNamePropType,\n      actions: PropTypes.arrayOf(\n        PropTypes.shape({\n          title: PropTypes.string.isRequired,\n          iconName: IconNamePropType,\n          iconSize: PropTypes.number,\n          iconColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n          show: PropTypes.oneOf(['always', 'ifRoom', 'never']),\n          showWithText: PropTypes.bool,\n        })\n      ),\n      iconSize: PropTypes.number,\n      iconColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      titleColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    };\n\n    static defaultProps = {\n      iconSize: 24,\n    };\n\n    state = {\n      logo: undefined,\n      navIcon: undefined,\n      overflowIcon: undefined,\n      actions: undefined,\n    };\n\n    componentDidMount() {\n      this.updateLogoIconSource();\n      this.updateNavIconSource();\n      this.updateOverflowIconSource();\n      this.updateActionIconSources();\n    }\n\n    componentDidUpdate(prevProps) {\n      if (!areLogoIconPropsEqual(prevProps, this.props)) {\n        this.updateLogoIconSource();\n      }\n      if (!areNavIconPropsEqual(prevProps, this.props)) {\n        this.updateNavIconSource();\n      }\n      if (!areOverflowIconPropsEqual(prevProps, this.props)) {\n        this.updateOverflowIconSource();\n      }\n      if (!areActionPropsEqual(prevProps, this.props)) {\n        this.updateActionIconSources();\n      }\n    }\n\n    async updateLogoIconSource() {\n      const { logoName, iconSize, iconColor, titleColor } = this.props;\n      if (logoName) {\n        const logo = await getImageSource(\n          logoName,\n          iconSize,\n          iconColor || titleColor\n        );\n        this.setState({ logo });\n        // eslint-disable-next-line react/destructuring-assignment\n      } else if (this.state.logo) {\n        this.setState({ logo: undefined });\n      }\n    }\n\n    async updateNavIconSource() {\n      const { navIconName, iconSize, iconColor, titleColor } = this.props;\n      if (navIconName) {\n        const navIcon = await getImageSource(\n          navIconName,\n          iconSize,\n          iconColor || titleColor\n        );\n        this.setState({ navIcon });\n        // eslint-disable-next-line react/destructuring-assignment\n      } else if (this.state.navIcon) {\n        this.setState({ navIcon: undefined });\n      }\n    }\n\n    async updateOverflowIconSource() {\n      const { overflowIconName, iconSize, iconColor, titleColor } = this.props;\n      if (overflowIconName) {\n        const overflowIcon = await getImageSource(\n          overflowIconName,\n          iconSize,\n          iconColor || titleColor\n        );\n        this.setState({ overflowIcon });\n        // eslint-disable-next-line react/destructuring-assignment\n      } else if (this.state.overflowIcon) {\n        this.setState({ overflowIcon: undefined });\n      }\n    }\n\n    async updateActionIconSources() {\n      const { actions, iconSize, iconColor, titleColor } = this.props;\n      const updatedActions = await Promise.all(\n        (actions || []).map(action => {\n          if (action.iconName) {\n            return getImageSource(\n              action.iconName,\n              action.iconSize || iconSize,\n              action.iconColor || iconColor || titleColor\n            ).then(icon => ({ ...action, icon }));\n          }\n          return Promise.resolve(action);\n        })\n      );\n      this.setState({ actions: updatedActions });\n    }\n\n    render() {\n      return <ToolbarAndroid {...this.props} {...this.state} />;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}