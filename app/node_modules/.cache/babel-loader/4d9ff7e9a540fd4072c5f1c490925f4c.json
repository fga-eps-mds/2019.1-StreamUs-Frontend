{"ast":null,"code":"import _toConsumableArray from \"/home/ygor/Documents/FGA/eps/2019.1-StreamUs-Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectWithoutProperties from \"/home/ygor/Documents/FGA/eps/2019.1-StreamUs-Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/home/ygor/Documents/FGA/eps/2019.1-StreamUs-Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ygor/Documents/FGA/eps/2019.1-StreamUs-Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ygor/Documents/FGA/eps/2019.1-StreamUs-Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ygor/Documents/FGA/eps/2019.1-StreamUs-Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/ygor/Documents/FGA/eps/2019.1-StreamUs-Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/ygor/Documents/FGA/eps/2019.1-StreamUs-Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"/home/ygor/Documents/FGA/eps/2019.1-StreamUs-Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/ygor/Documents/FGA/eps/2019.1-StreamUs-Frontend/node_modules/react-native-vector-icons/lib/create-icon-set.js\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { NativeModules, Platform, PixelRatio, processColor, Text } from './react-native';\nimport ensureNativeModuleAvailable from './ensure-native-module-available';\nimport createIconButtonComponent from './icon-button';\nimport createTabBarItemIOSComponent from './tab-bar-item-ios';\nimport createToolbarAndroidComponent from './toolbar-android';\nexport var NativeIconAPI = NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\nexport var DEFAULT_ICON_SIZE = 12;\nexport var DEFAULT_ICON_COLOR = 'black';\nexport default function createIconSet(glyphMap, fontFamily, fontFile, fontStyle) {\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\n  var fontBasename = fontFile ? fontFile.replace(/\\.(otf|ttf)$/, '') : fontFamily;\n  var fontReference = Platform.select({\n    windows: \"Assets/\".concat(fontFile, \"#\").concat(fontFamily),\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily\n  });\n  var IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n\n  var Icon =\n  /*#__PURE__*/\n  function (_PureComponent) {\n    _inherits(Icon, _PureComponent);\n\n    function Icon() {\n      var _getPrototypeOf2;\n\n      var _this;\n\n      _classCallCheck(this, Icon);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Icon)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n      _defineProperty(_assertThisInitialized(_this), \"root\", null);\n\n      _defineProperty(_assertThisInitialized(_this), \"handleRef\", function (ref) {\n        _this.root = ref;\n      });\n\n      return _this;\n    }\n\n    _createClass(Icon, [{\n      key: \"setNativeProps\",\n      value: function setNativeProps(nativeProps) {\n        if (this.root) {\n          this.root.setNativeProps(nativeProps);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n            name = _this$props.name,\n            size = _this$props.size,\n            color = _this$props.color,\n            style = _this$props.style,\n            children = _this$props.children,\n            props = _objectWithoutProperties(_this$props, [\"name\", \"size\", \"color\", \"style\", \"children\"]);\n\n        var glyph = name ? glyphMap[name] || '?' : '';\n\n        if (typeof glyph === 'number') {\n          glyph = String.fromCharCode(glyph);\n        }\n\n        var styleDefaults = {\n          fontSize: size,\n          color: color\n        };\n        var styleOverrides = {\n          fontFamily: fontReference,\n          fontWeight: 'normal',\n          fontStyle: 'normal'\n        };\n        props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n        props.ref = this.handleRef;\n        return React.createElement(Text, Object.assign({}, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92\n          },\n          __self: this\n        }), glyph, children);\n      }\n    }]);\n\n    return Icon;\n  }(PureComponent);\n\n  _defineProperty(Icon, \"propTypes\", {\n    allowFontScaling: PropTypes.bool,\n    name: IconNamePropType,\n    size: PropTypes.number,\n    color: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    children: PropTypes.node,\n    style: PropTypes.any // eslint-disable-line react/forbid-prop-types\n\n  });\n\n  _defineProperty(Icon, \"defaultProps\", {\n    size: DEFAULT_ICON_SIZE,\n    allowFontScaling: false\n  });\n\n  var imageSourceCache = {};\n\n  function getImageSource(name) {\n    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;\n    var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;\n    ensureNativeModuleAvailable();\n    var glyph = glyphMap[name] || '?';\n\n    if (typeof glyph === 'number') {\n      glyph = String.fromCharCode(glyph);\n    }\n\n    var processedColor = processColor(color);\n    var cacheKey = \"\".concat(glyph, \":\").concat(size, \":\").concat(processedColor);\n    var scale = PixelRatio.get();\n    return new Promise(function (resolve, reject) {\n      var cached = imageSourceCache[cacheKey];\n\n      if (typeof cached !== 'undefined') {\n        if (!cached || cached instanceof Error) {\n          reject(cached);\n        } else {\n          resolve({\n            uri: cached,\n            scale: scale\n          });\n        }\n      } else {\n        NativeIconAPI.getImageForFont(fontReference, glyph, size, processedColor, function (err, image) {\n          var error = typeof err === 'string' ? new Error(err) : err;\n          imageSourceCache[cacheKey] = image || error || false;\n\n          if (!error && image) {\n            resolve({\n              uri: image,\n              scale: scale\n            });\n          } else {\n            reject(error);\n          }\n        });\n      }\n    });\n  }\n\n  function loadFont() {\n    var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : fontFile;\n\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n\n      if (!file) {\n        return Promise.reject(new Error('Unable to load font, because no file was specified. '));\n      }\n\n      return NativeIconAPI.loadFontWithFileName.apply(NativeIconAPI, _toConsumableArray(file.split('.')));\n    }\n\n    return Promise.resolve();\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.TabBarItem = createTabBarItemIOSComponent(IconNamePropType, getImageSource);\n  Icon.TabBarItemIOS = Icon.TabBarItem;\n  Icon.ToolbarAndroid = createToolbarAndroidComponent(IconNamePropType, getImageSource);\n  Icon.getImageSource = getImageSource;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n  return Icon;\n}","map":{"version":3,"sources":["/home/ygor/Documents/FGA/eps/2019.1-StreamUs-Frontend/node_modules/react-native-vector-icons/lib/create-icon-set.js"],"names":["React","PureComponent","PropTypes","NativeModules","Platform","PixelRatio","processColor","Text","ensureNativeModuleAvailable","createIconButtonComponent","createTabBarItemIOSComponent","createToolbarAndroidComponent","NativeIconAPI","RNVectorIconsManager","RNVectorIconsModule","DEFAULT_ICON_SIZE","DEFAULT_ICON_COLOR","createIconSet","glyphMap","fontFamily","fontFile","fontStyle","fontBasename","replace","fontReference","select","windows","android","web","default","IconNamePropType","oneOf","Object","keys","Icon","ref","root","nativeProps","setNativeProps","props","name","size","color","style","children","glyph","String","fromCharCode","styleDefaults","fontSize","styleOverrides","fontWeight","handleRef","allowFontScaling","bool","number","oneOfType","string","node","any","imageSourceCache","getImageSource","processedColor","cacheKey","scale","get","Promise","resolve","reject","cached","Error","uri","getImageForFont","err","image","error","loadFont","file","OS","loadFontWithFileName","split","hasIcon","prototype","hasOwnProperty","call","getRawGlyphMap","getFontFamily","Button","TabBarItem","TabBarItemIOS","ToolbarAndroid"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  NativeModules,\n  Platform,\n  PixelRatio,\n  processColor,\n  Text,\n} from './react-native';\n\nimport ensureNativeModuleAvailable from './ensure-native-module-available';\nimport createIconButtonComponent from './icon-button';\nimport createTabBarItemIOSComponent from './tab-bar-item-ios';\nimport createToolbarAndroidComponent from './toolbar-android';\n\nexport const NativeIconAPI =\n  NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\n\nexport const DEFAULT_ICON_SIZE = 12;\nexport const DEFAULT_ICON_COLOR = 'black';\n\nexport default function createIconSet(\n  glyphMap,\n  fontFamily,\n  fontFile,\n  fontStyle\n) {\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\n  const fontBasename = fontFile\n    ? fontFile.replace(/\\.(otf|ttf)$/, '')\n    : fontFamily;\n\n  const fontReference = Platform.select({\n    windows: `Assets/${fontFile}#${fontFamily}`,\n    android: fontBasename,\n    web: fontBasename,\n    default: fontFamily,\n  });\n\n  const IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n\n  class Icon extends PureComponent {\n    static propTypes = {\n      allowFontScaling: PropTypes.bool,\n      name: IconNamePropType,\n      size: PropTypes.number,\n      color: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      children: PropTypes.node,\n      style: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n    };\n\n    static defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false,\n    };\n\n    root = null;\n\n    setNativeProps(nativeProps) {\n      if (this.root) {\n        this.root.setNativeProps(nativeProps);\n      }\n    }\n\n    handleRef = ref => {\n      this.root = ref;\n    };\n\n    render() {\n      const { name, size, color, style, children, ...props } = this.props;\n\n      let glyph = name ? glyphMap[name] || '?' : '';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCharCode(glyph);\n      }\n\n      const styleDefaults = {\n        fontSize: size,\n        color,\n      };\n\n      const styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n      };\n\n      props.style = [styleDefaults, style, styleOverrides, fontStyle || {}];\n      props.ref = this.handleRef;\n\n      return (\n        <Text {...props}>\n          {glyph}\n          {children}\n        </Text>\n      );\n    }\n  }\n\n  const imageSourceCache = {};\n\n  function getImageSource(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    let glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      glyph = String.fromCharCode(glyph);\n    }\n\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n    const scale = PixelRatio.get();\n\n    return new Promise((resolve, reject) => {\n      const cached = imageSourceCache[cacheKey];\n      if (typeof cached !== 'undefined') {\n        if (!cached || cached instanceof Error) {\n          reject(cached);\n        } else {\n          resolve({ uri: cached, scale });\n        }\n      } else {\n        NativeIconAPI.getImageForFont(\n          fontReference,\n          glyph,\n          size,\n          processedColor,\n          (err, image) => {\n            const error = typeof err === 'string' ? new Error(err) : err;\n            imageSourceCache[cacheKey] = image || error || false;\n            if (!error && image) {\n              resolve({ uri: image, scale });\n            } else {\n              reject(error);\n            }\n          }\n        );\n      }\n    });\n  }\n\n  function loadFont(file = fontFile) {\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n      if (!file) {\n        return Promise.reject(\n          new Error('Unable to load font, because no file was specified. ')\n        );\n      }\n      return NativeIconAPI.loadFontWithFileName(...file.split('.'));\n    }\n    return Promise.resolve();\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  function getRawGlyphMap() {\n    return glyphMap;\n  }\n\n  function getFontFamily() {\n    return fontReference;\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.TabBarItem = createTabBarItemIOSComponent(\n    IconNamePropType,\n    getImageSource\n  );\n  Icon.TabBarItemIOS = Icon.TabBarItem;\n  Icon.ToolbarAndroid = createToolbarAndroidComponent(\n    IconNamePropType,\n    getImageSource\n  );\n  Icon.getImageSource = getImageSource;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  Icon.getRawGlyphMap = getRawGlyphMap;\n  Icon.getFontFamily = getFontFamily;\n\n  return Icon;\n}\n"]},"metadata":{},"sourceType":"module"}