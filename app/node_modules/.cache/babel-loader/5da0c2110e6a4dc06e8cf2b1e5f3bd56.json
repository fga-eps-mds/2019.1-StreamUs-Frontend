{"ast":null,"code":"var Class = require('../../core/class');\n\nvar Path = require('../../core/path');\n\nvar precision = 100;\nvar round = Math.round;\nvar VMLPath = Class(Path, {\n  initialize: function initialize(path) {\n    this.reset();\n\n    if (path instanceof VMLPath) {\n      this.path = [Array.prototype.join.call(path.path, ' ')];\n    } else if (path) {\n      if (path.applyToPath) path.applyToPath(this);else this.push(path);\n    }\n  },\n  onReset: function onReset() {\n    this.path = [];\n  },\n  onMove: function onMove(sx, sy, x, y) {\n    this.path.push('m', round(x * precision), round(y * precision));\n  },\n  onLine: function onLine(sx, sy, x, y) {\n    this.path.push('l', round(x * precision), round(y * precision));\n  },\n  onBezierCurve: function onBezierCurve(sx, sy, p1x, p1y, p2x, p2y, x, y) {\n    this.path.push('c', round(p1x * precision), round(p1y * precision), round(p2x * precision), round(p2y * precision), round(x * precision), round(y * precision));\n  },\n  _arcToBezier: Path.prototype.onArc,\n  onArc: function onArc(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation) {\n    if (rx != ry || rotation) return this._arcToBezier(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation);\n    cx *= precision;\n    cy *= precision;\n    rx *= precision;\n    this.path.push(ccw ? 'at' : 'wa', round(cx - rx), round(cy - rx), round(cx + rx), round(cy + rx), round(sx * precision), round(sy * precision), round(ex * precision), round(ey * precision));\n  },\n  onClose: function onClose() {\n    this.path.push('x');\n  },\n  toVML: function toVML() {\n    return this.path.join(' ');\n  }\n});\nVMLPath.prototype.toString = VMLPath.prototype.toVML;\nmodule.exports = VMLPath;","map":null,"metadata":{},"sourceType":"script"}