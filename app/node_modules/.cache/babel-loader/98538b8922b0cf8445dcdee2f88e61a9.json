{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SwipeRow = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _jsxFileName = \"src/basic/SwipeRow.js\";\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactNative = require(\"react-native\");\n\nvar _nativeBaseShoutemTheme = require(\"native-base-shoutem-theme\");\n\nvar _Text = require(\"./Text\");\n\nvar _Left = require(\"./Left\");\n\nvar _Right = require(\"./Right\");\n\nvar _Body = require(\"./Body\");\n\nvar _ListItem = require(\"./ListItem\");\n\nvar _mapPropsToStyleNames = require(\"../utils/mapPropsToStyleNames\");\n\nvar _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar PREVIEW_OPEN_DELAY = 700;\nvar PREVIEW_CLOSE_DELAY = 300;\n\nvar SwipeRow = function (_Component) {\n  _inherits(SwipeRow, _Component);\n\n  function SwipeRow(props) {\n    _classCallCheck(this, SwipeRow);\n\n    var _this = _possibleConstructorReturn(this, (SwipeRow.__proto__ || Object.getPrototypeOf(SwipeRow)).call(this, props));\n\n    _this.horizontalSwipeGestureBegan = false;\n    _this.swipeInitialX = null;\n    _this.parentScrollEnabled = true;\n    _this.ranPreview = false;\n    _this.state = {\n      dimensionsSet: false,\n      hiddenHeight: 0,\n      hiddenWidth: 0\n    };\n    _this._translateX = new _reactNative.Animated.Value(0);\n    return _this;\n  }\n\n  _createClass(SwipeRow, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      this._panResponder = _reactNative.PanResponder.create({\n        onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(e, gs) {\n          return _this2.handleOnMoveShouldSetPanResponder(e, gs);\n        },\n        onPanResponderMove: function onPanResponderMove(e, gs) {\n          return _this2.handlePanResponderMove(e, gs);\n        },\n        onPanResponderRelease: function onPanResponderRelease(e, gs) {\n          return _this2.handlePanResponderEnd(e, gs);\n        },\n        onPanResponderTerminate: function onPanResponderTerminate(e, gs) {\n          return _this2.handlePanResponderEnd(e, gs);\n        },\n        onShouldBlockNativeResponder: function onShouldBlockNativeResponder(_) {\n          return false;\n        }\n      });\n    }\n  }, {\n    key: \"getPreviewAnimation\",\n    value: function getPreviewAnimation(toValue, delay) {\n      return _reactNative.Animated.timing(this._translateX, {\n        duration: this.props.previewDuration,\n        toValue: toValue,\n        delay: delay\n      });\n    }\n  }, {\n    key: \"onContentLayout\",\n    value: function onContentLayout(e) {\n      var _this3 = this;\n\n      this.setState({\n        dimensionsSet: !this.props.recalculateHiddenLayout,\n        hiddenHeight: e.nativeEvent.layout.height,\n        hiddenWidth: e.nativeEvent.layout.width\n      });\n\n      if (this.props.preview && !this.ranPreview) {\n        this.ranPreview = true;\n        var previewOpenValue = this.props.previewOpenValue || this.props.rightOpenValue * 0.5;\n        this.getPreviewAnimation(previewOpenValue, PREVIEW_OPEN_DELAY).start(function (_) {\n          _this3.getPreviewAnimation(0, PREVIEW_CLOSE_DELAY).start();\n        });\n      }\n    }\n  }, {\n    key: \"handleOnMoveShouldSetPanResponder\",\n    value: function handleOnMoveShouldSetPanResponder(e, gs) {\n      var dx = gs.dx;\n      return Math.abs(dx) > this.props.directionalDistanceChangeThreshold;\n    }\n  }, {\n    key: \"handlePanResponderMove\",\n    value: function handlePanResponderMove(e, gestureState) {\n      var dx = gestureState.dx,\n          dy = gestureState.dy;\n      var absDx = Math.abs(dx);\n      var absDy = Math.abs(dy);\n\n      if (absDx > this.props.directionalDistanceChangeThreshold || absDy > this.props.directionalDistanceChangeThreshold) {\n        if (absDy > absDx && !this.horizontalSwipeGestureBegan) {\n          return;\n        }\n\n        if (this.parentScrollEnabled) {\n          this.parentScrollEnabled = false;\n          this.props.setScrollEnabled && this.props.setScrollEnabled(false);\n        }\n\n        if (this.swipeInitialX === null) {\n          this.swipeInitialX = this._translateX._value;\n        }\n\n        if (!this.horizontalSwipeGestureBegan) {\n          this.horizontalSwipeGestureBegan = true;\n          this.props.swipeGestureBegan && this.props.swipeGestureBegan();\n        }\n\n        var newDX = this.swipeInitialX + dx;\n\n        if (this.props.disableLeftSwipe && newDX < 0) {\n          newDX = 0;\n        }\n\n        if (this.props.disableRightSwipe && newDX > 0) {\n          newDX = 0;\n        }\n\n        if (this.props.stopLeftSwipe && newDX > this.props.stopLeftSwipe) {\n          newDX = this.props.stopLeftSwipe;\n        }\n\n        if (this.props.stopRightSwipe && newDX < this.props.stopRightSwipe) {\n          newDX = this.props.stopRightSwipe;\n        }\n\n        this._translateX.setValue(newDX);\n      }\n    }\n  }, {\n    key: \"handlePanResponderEnd\",\n    value: function handlePanResponderEnd(e, gestureState) {\n      if (!this.parentScrollEnabled) {\n        this.parentScrollEnabled = true;\n        this.props.setScrollEnabled && this.props.setScrollEnabled(true);\n      }\n\n      var toValue = 0;\n\n      if (this._translateX._value >= 0) {\n        if (this._translateX._value > this.props.leftOpenValue * (this.props.swipeToOpenPercent / 100)) {\n          toValue = this.props.leftOpenValue;\n        }\n      } else {\n        if (this._translateX._value < this.props.rightOpenValue * (this.props.swipeToOpenPercent / 100)) {\n          toValue = this.props.rightOpenValue;\n        }\n      }\n\n      this.manuallySwipeRow(toValue);\n    }\n  }, {\n    key: \"closeRow\",\n    value: function closeRow() {\n      this.manuallySwipeRow(0);\n    }\n  }, {\n    key: \"openLeftRow\",\n    value: function openLeftRow() {\n      this.manuallySwipeRow(this.props.leftOpenValue);\n    }\n  }, {\n    key: \"openRightRow\",\n    value: function openRightRow() {\n      this.manuallySwipeRow(this.props.rightOpenValue);\n    }\n  }, {\n    key: \"manuallySwipeRow\",\n    value: function manuallySwipeRow(toValue) {\n      var _this4 = this;\n\n      _reactNative.Animated.spring(this._translateX, {\n        toValue: toValue,\n        friction: this.props.friction,\n        tension: this.props.tension\n      }).start(function (_) {\n        if (toValue === 0) {\n          _this4.props.onRowDidClose && _this4.props.onRowDidClose();\n        } else {\n          _this4.props.onRowDidOpen && _this4.props.onRowDidOpen();\n        }\n      });\n\n      if (toValue === 0) {\n        this.props.onRowClose && this.props.onRowClose();\n      } else {\n        this.props.onRowOpen && this.props.onRowOpen(toValue);\n      }\n\n      this.swipeInitialX = null;\n      this.horizontalSwipeGestureBegan = false;\n    }\n  }, {\n    key: \"renderMainContent\",\n    value: function renderMainContent() {\n      var _this5 = this;\n\n      if (this.state.dimensionsSet) {\n        return _react2.default.createElement(_reactNative.Animated.View, _extends({}, this._panResponder.panHandlers, {\n          style: {\n            transform: [{\n              translateX: this._translateX\n            }],\n            zIndex: 2\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 199\n          }\n        }), !this.props.list ? _react2.default.createElement(_ListItem.ListItem, {\n          list: true,\n          style: this.props.style,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207\n          }\n        }, this.props.body) : _react2.default.createElement(_reactNative.View, {\n          style: [{\n            backgroundColor: '#FFF'\n          }, this.props.style],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 210\n          }\n        }, this.props.body));\n      } else {\n        return _react2.default.createElement(_reactNative.Animated.View, _extends({}, this._panResponder.panHandlers, {\n          onLayout: function onLayout(e) {\n            return _this5.onContentLayout(e);\n          },\n          style: {\n            transform: [{\n              translateX: this._translateX\n            }],\n            zIndex: 2\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 217\n          }\n        }), !this.props.list ? _react2.default.createElement(_ListItem.ListItem, {\n          list: true,\n          style: this.props.style,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 226\n          }\n        }, this.props.body) : _react2.default.createElement(_reactNative.View, {\n          style: [{\n            backgroundColor: '#FFF'\n          }, this.props.style],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 229\n          }\n        }, this.props.body));\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return _react2.default.createElement(_reactNative.View, {\n        style: this.props.style ? this.props.style : undefined,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        }\n      }, _react2.default.createElement(_reactNative.View, {\n        style: [styles.hidden, {\n          height: this.state.hiddenHeight,\n          flex: 1,\n          flexDirection: \"row\",\n          justifyContent: \"space-between\"\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240\n        }\n      }, _react2.default.createElement(_Left.Left, {\n        style: {\n          width: this.props.leftOpenValue,\n          zIndex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        }\n      }, this.props.left), _react2.default.createElement(_Body.Body, {\n        style: {\n          flex: 0\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        }\n      }), _react2.default.createElement(_Right.Right, {\n        style: {\n          width: -this.props.rightOpenValue,\n          zIndex: 1\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        }\n      }, this.props.right)), this.renderMainContent());\n    }\n  }]);\n\n  return SwipeRow;\n}(_react.Component);\n\nSwipeRow.defaultProps = {\n  leftOpenValue: 0,\n  rightOpenValue: 0,\n  closeOnRowPress: true,\n  disableLeftSwipe: false,\n  disableRightSwipe: false,\n  recalculateHiddenLayout: false,\n  preview: false,\n  previewDuration: 300,\n  directionalDistanceChangeThreshold: 2,\n  swipeToOpenPercent: 50\n};\nvar styles = {\n  container: {},\n  hidden: {\n    bottom: 0,\n    left: 0,\n    overflow: \"hidden\",\n    position: \"absolute\",\n    right: 0,\n    top: 0\n  }\n};\nvar StyledSwipeRow = (0, _nativeBaseShoutemTheme.connectStyle)(\"NativeBase.SwipeRow\", {}, _mapPropsToStyleNames2.default)(SwipeRow);\nexports.SwipeRow = StyledSwipeRow;","map":null,"metadata":{},"sourceType":"script"}