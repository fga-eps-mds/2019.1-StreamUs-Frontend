{"ast":null,"code":"/* eslint-disable */\n\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Based on React 16.3.0\n */\nimport dangerousStyleValue from '../dangerousStyleValue';\nimport hyphenateStyleName from 'hyphenate-style-name';\nimport warnValidStyle from '../warnValidStyle';\n/**\n * Sets the value for multiple styles on a node.  If a value is specified as\n * '' (empty string), the corresponding style property will be unset.\n *\n * @param {DOMElement} node\n * @param {object} styles\n */\n\nfunction setValueForStyles(node, styles, getStack) {\n  var style = node.style;\n\n  for (var styleName in styles) {\n    if (!styles.hasOwnProperty(styleName)) {\n      continue;\n    }\n\n    var isCustomProperty = styleName.indexOf('--') === 0;\n    var isImportant = typeof styles[styleName] === 'string' && styles[styleName].indexOf('!important') > -1;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!isCustomProperty) {\n        warnValidStyle(styleName, styles[styleName], getStack);\n      }\n    }\n\n    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);\n\n    if (styleName === 'float') {\n      styleName = 'cssFloat';\n    }\n\n    if (isCustomProperty || isImportant) {\n      var name = isCustomProperty ? styleName : hyphenateStyleName(styleName);\n\n      if (isImportant) {\n        var _styleValue$split = styleValue.split('!'),\n            value = _styleValue$split[0],\n            priority = _styleValue$split[1];\n\n        style.setProperty(name, value, priority);\n      } else {\n        style.setProperty(name, styleValue);\n      }\n    } else {\n      style[styleName] = styleValue;\n    }\n  }\n}\n\nexport default setValueForStyles;","map":{"version":3,"sources":["/home/ygor/Documents/FGA/eps/2019.1-StreamUs-Frontend/node_modules/react-native-web/dist/vendor/react-dom/setValueForStyles/index.js"],"names":["dangerousStyleValue","hyphenateStyleName","warnValidStyle","setValueForStyles","node","styles","getStack","style","styleName","hasOwnProperty","isCustomProperty","indexOf","isImportant","process","env","NODE_ENV","styleValue","name","_styleValue$split","split","value","priority","setProperty"],"mappings":"AAAA;;AAEA;;;;;;;;;AASA,OAAOA,mBAAP,MAAgC,wBAAhC;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,OAAOC,cAAP,MAA2B,mBAA3B;AACA;;;;;;;;AAQA,SAASC,iBAAT,CAA2BC,IAA3B,EAAiCC,MAAjC,EAAyCC,QAAzC,EAAmD;AACjD,MAAIC,KAAK,GAAGH,IAAI,CAACG,KAAjB;;AAEA,OAAK,IAAIC,SAAT,IAAsBH,MAAtB,EAA8B;AAC5B,QAAI,CAACA,MAAM,CAACI,cAAP,CAAsBD,SAAtB,CAAL,EAAuC;AACrC;AACD;;AAED,QAAIE,gBAAgB,GAAGF,SAAS,CAACG,OAAV,CAAkB,IAAlB,MAA4B,CAAnD;AACA,QAAIC,WAAW,GAAG,OAAOP,MAAM,CAACG,SAAD,CAAb,KAA6B,QAA7B,IAAyCH,MAAM,CAACG,SAAD,CAAN,CAAkBG,OAAlB,CAA0B,YAA1B,IAA0C,CAAC,CAAtG;;AAEA,QAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAI,CAACL,gBAAL,EAAuB;AACrBR,QAAAA,cAAc,CAACM,SAAD,EAAYH,MAAM,CAACG,SAAD,CAAlB,EAA+BF,QAA/B,CAAd;AACD;AACF;;AAED,QAAIU,UAAU,GAAGhB,mBAAmB,CAACQ,SAAD,EAAYH,MAAM,CAACG,SAAD,CAAlB,EAA+BE,gBAA/B,CAApC;;AAEA,QAAIF,SAAS,KAAK,OAAlB,EAA2B;AACzBA,MAAAA,SAAS,GAAG,UAAZ;AACD;;AAED,QAAIE,gBAAgB,IAAIE,WAAxB,EAAqC;AACnC,UAAIK,IAAI,GAAGP,gBAAgB,GAAGF,SAAH,GAAeP,kBAAkB,CAACO,SAAD,CAA5D;;AAEA,UAAII,WAAJ,EAAiB;AACf,YAAIM,iBAAiB,GAAGF,UAAU,CAACG,KAAX,CAAiB,GAAjB,CAAxB;AAAA,YACIC,KAAK,GAAGF,iBAAiB,CAAC,CAAD,CAD7B;AAAA,YAEIG,QAAQ,GAAGH,iBAAiB,CAAC,CAAD,CAFhC;;AAIAX,QAAAA,KAAK,CAACe,WAAN,CAAkBL,IAAlB,EAAwBG,KAAxB,EAA+BC,QAA/B;AACD,OAND,MAMO;AACLd,QAAAA,KAAK,CAACe,WAAN,CAAkBL,IAAlB,EAAwBD,UAAxB;AACD;AACF,KAZD,MAYO;AACLT,MAAAA,KAAK,CAACC,SAAD,CAAL,GAAmBQ,UAAnB;AACD;AACF;AACF;;AAED,eAAeb,iBAAf","sourcesContent":["/* eslint-disable */\n\n/**\n * Copyright 2013-present, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Based on React 16.3.0\n */\nimport dangerousStyleValue from '../dangerousStyleValue';\nimport hyphenateStyleName from 'hyphenate-style-name';\nimport warnValidStyle from '../warnValidStyle';\n/**\n * Sets the value for multiple styles on a node.  If a value is specified as\n * '' (empty string), the corresponding style property will be unset.\n *\n * @param {DOMElement} node\n * @param {object} styles\n */\n\nfunction setValueForStyles(node, styles, getStack) {\n  var style = node.style;\n\n  for (var styleName in styles) {\n    if (!styles.hasOwnProperty(styleName)) {\n      continue;\n    }\n\n    var isCustomProperty = styleName.indexOf('--') === 0;\n    var isImportant = typeof styles[styleName] === 'string' && styles[styleName].indexOf('!important') > -1;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!isCustomProperty) {\n        warnValidStyle(styleName, styles[styleName], getStack);\n      }\n    }\n\n    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);\n\n    if (styleName === 'float') {\n      styleName = 'cssFloat';\n    }\n\n    if (isCustomProperty || isImportant) {\n      var name = isCustomProperty ? styleName : hyphenateStyleName(styleName);\n\n      if (isImportant) {\n        var _styleValue$split = styleValue.split('!'),\n            value = _styleValue$split[0],\n            priority = _styleValue$split[1];\n\n        style.setProperty(name, value, priority);\n      } else {\n        style.setProperty(name, styleValue);\n      }\n    } else {\n      style[styleName] = styleValue;\n    }\n  }\n}\n\nexport default setValueForStyles;"]},"metadata":{},"sourceType":"module"}