{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Button = undefined;\nvar _jsxFileName = \"src/basic/Button.js\";\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactNative = require(\"react-native\");\n\nvar _nativeBaseShoutemTheme = require(\"native-base-shoutem-theme\");\n\nvar _platform = require(\"./../theme/variables/platform\");\n\nvar _platform2 = _interopRequireDefault(_platform);\n\nvar _Text = require(\"./Text\");\n\nvar _computeProps = require(\"../utils/computeProps\");\n\nvar _computeProps2 = _interopRequireDefault(_computeProps);\n\nvar _mapPropsToStyleNames = require(\"../utils/mapPropsToStyleNames\");\n\nvar _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Button = function (_Component) {\n  _inherits(Button, _Component);\n\n  function Button() {\n    _classCallCheck(this, Button);\n\n    return _possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));\n  }\n\n  _createClass(Button, [{\n    key: \"getInitialStyle\",\n    value: function getInitialStyle() {\n      return {\n        borderedBtn: {\n          borderWidth: this.props.bordered ? 1 : undefined,\n          borderRadius: this.props.rounded && this.props.bordered ? _platform2.default.borderRadiusLarge : 2\n        }\n      };\n    }\n  }, {\n    key: \"prepareRootProps\",\n    value: function prepareRootProps() {\n      var defaultProps = {\n        style: this.getInitialStyle().borderedBtn\n      };\n\n      if (Array.isArray(this.props.style)) {\n        var flattenedStyle = this.props.style.reduce(function (accumulator, currentValue) {\n          return accumulator.concat(currentValue);\n        }, []);\n        return (0, _computeProps2.default)(_extends({}, this.props, {\n          style: flattenedStyle\n        }), defaultProps);\n      }\n\n      return (0, _computeProps2.default)(this.props, defaultProps);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var variables = this.context.theme ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables : _platform2.default;\n      var children = _reactNative.Platform.OS === \"ios\" ? this.props.children : _react2.default.Children.map(this.props.children, function (child) {\n        return child && child.type === _Text.Text ? _react2.default.cloneElement(child, _extends({\n          uppercase: variables.btnUppercaseAndroidText\n        }, child.props)) : child;\n      });\n\n      if (_reactNative.Platform.OS === \"ios\" || _reactNative.Platform.OS === \"web\" || variables.androidRipple === false || _reactNative.Platform[\"Version\"] < 21) {\n        return _react2.default.createElement(_reactNative.TouchableOpacity, _extends({}, this.prepareRootProps(), {\n          ref: function ref(c) {\n            return _this2._root = c;\n          },\n          activeOpacity: this.props.activeOpacity > 0 ? this.props.activeOpacity : 0.5,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          }\n        }), children);\n      } else {\n        if (this.props.rounded) {\n          var buttonStyle = _extends({}, this.prepareRootProps().style);\n\n          var buttonFlex = this.props.full || this.props.block ? 1 : buttonStyle.flex;\n          return _react2.default.createElement(_reactNative.View, {\n            style: [{\n              maxHeight: buttonStyle.height\n            }, buttonStyle, {\n              paddingTop: undefined,\n              paddingBottom: undefined\n            }],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 88\n            }\n          }, _react2.default.createElement(_reactNative.TouchableNativeFeedback, _extends({\n            ref: function ref(c) {\n              return _this2._root = c;\n            },\n            background: this.props.androidRippleColor ? _reactNative.TouchableNativeFeedback.Ripple(this.props.androidRippleColor, true) : _reactNative.TouchableNativeFeedback.Ripple(variables.androidRippleColor, true)\n          }, this.prepareRootProps(), {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 89\n            }\n          }), _react2.default.createElement(_reactNative.View, {\n            style: [styles.childContainer, {\n              paddingTop: buttonStyle.paddingTop,\n              paddingBottom: buttonStyle.paddingBottom,\n              height: buttonStyle.height,\n              flexGrow: buttonFlex\n            }],\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98\n            }\n          }, children)));\n        } else {\n          return _react2.default.createElement(_reactNative.TouchableNativeFeedback, _extends({\n            ref: function ref(c) {\n              return _this2._root = c;\n            },\n            onPress: this.props.onPress,\n            background: this.props.transparent ? _reactNative.TouchableNativeFeedback.Ripple('transparent') : _reactNative.TouchableNativeFeedback.Ripple(variables.androidRippleColor, false)\n          }, this.prepareRootProps(), {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 106\n            }\n          }), _react2.default.createElement(_reactNative.View, _extends({}, this.prepareRootProps(), {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 112\n            }\n          }), children));\n        }\n      }\n    }\n  }]);\n\n  return Button;\n}(_react.Component);\n\nButton.contextTypes = {\n  theme: _propTypes2.default.object\n};\nButton.propTypes = _extends({}, _reactNative.TouchableOpacity.propTypes, {\n  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array]),\n  block: _propTypes2.default.bool,\n  primary: _propTypes2.default.bool,\n  transparent: _propTypes2.default.bool,\n  success: _propTypes2.default.bool,\n  danger: _propTypes2.default.bool,\n  warning: _propTypes2.default.bool,\n  info: _propTypes2.default.bool,\n  bordered: _propTypes2.default.bool,\n  disabled: _propTypes2.default.bool,\n  rounded: _propTypes2.default.bool,\n  large: _propTypes2.default.bool,\n  small: _propTypes2.default.bool,\n  active: _propTypes2.default.bool\n});\n\nvar styles = _reactNative.StyleSheet.create({\n  childContainer: {\n    flexShrink: 1,\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\n\nvar StyledButton = (0, _nativeBaseShoutemTheme.connectStyle)(\"NativeBase.Button\", {}, _mapPropsToStyleNames2.default)(Button);\nexports.Button = StyledButton;","map":null,"metadata":{},"sourceType":"script"}