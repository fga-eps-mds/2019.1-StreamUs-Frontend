{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ToastContainer = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _jsxFileName = \"src/basic/ToastContainer.js\";\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactNative = require(\"react-native\");\n\nvar _nativeBaseShoutemTheme = require(\"native-base-shoutem-theme\");\n\nvar _Text = require(\"./Text\");\n\nvar _Button = require(\"./Button\");\n\nvar _View = require(\"./View\");\n\nvar _Toast = require(\"./Toast\");\n\nvar _mapPropsToStyleNames = require(\"../utils/mapPropsToStyleNames\");\n\nvar _mapPropsToStyleNames2 = _interopRequireDefault(_mapPropsToStyleNames);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar ToastContainer = function (_Component) {\n  _inherits(ToastContainer, _Component);\n\n  function ToastContainer(props) {\n    _classCallCheck(this, ToastContainer);\n\n    var _this = _possibleConstructorReturn(this, (ToastContainer.__proto__ || Object.getPrototypeOf(ToastContainer)).call(this, props));\n\n    _this.state = {\n      modalVisible: false,\n      fadeAnim: new _reactNative.Animated.Value(0)\n    };\n    return _this;\n  }\n\n  _createClass(ToastContainer, [{\n    key: \"getToastStyle\",\n    value: function getToastStyle() {\n      return {\n        position: \"absolute\",\n        opacity: this.state.fadeAnim,\n        width: \"100%\",\n        elevation: 9,\n        paddingHorizontal: _reactNative.Platform.OS === \"ios\" ? 20 : 0,\n        top: this.state.position === \"top\" ? this.getTop() : undefined,\n        bottom: this.state.position === \"bottom\" ? this.getTop() : undefined\n      };\n    }\n  }, {\n    key: \"getTop\",\n    value: function getTop() {\n      if (_reactNative.Platform.OS === \"ios\") {\n        return 30;\n      } else {\n        return 0;\n      }\n    }\n  }, {\n    key: \"getButtonText\",\n    value: function getButtonText(buttonText) {\n      if (buttonText) {\n        if (buttonText.trim().length === 0) {\n          return undefined;\n        } else return buttonText;\n      }\n\n      return undefined;\n    }\n  }, {\n    key: \"getModalState\",\n    value: function getModalState() {\n      return this.state.modalVisible;\n    }\n  }, {\n    key: \"showToast\",\n    value: function showToast(_ref) {\n      var config = _ref.config;\n      this.setState({\n        modalVisible: true,\n        text: config.text,\n        buttonText: this.getButtonText(config.buttonText),\n        type: config.type,\n        position: config.position ? config.position : \"bottom\",\n        supportedOrientations: config.supportedOrientations,\n        style: config.style,\n        buttonTextStyle: config.buttonTextStyle,\n        buttonStyle: config.buttonStyle,\n        textStyle: config.textStyle,\n        onClose: config.onClose\n      });\n\n      if (this.closeTimeout) {\n        clearTimeout(this.closeTimeout);\n      }\n\n      if (config.duration !== 0) {\n        var duration = config.duration > 0 ? config.duration : 1500;\n        this.closeTimeout = setTimeout(this.closeToast.bind(this, 'timeout'), duration);\n      }\n\n      _reactNative.Animated.timing(this.state.fadeAnim, {\n        toValue: 1,\n        duration: 200\n      }).start();\n    }\n  }, {\n    key: \"closeModal\",\n    value: function closeModal(reason) {\n      this.setState({\n        modalVisible: false\n      });\n      var onClose = this.state.onClose;\n\n      if (onClose && typeof onClose === \"function\") {\n        onClose(reason);\n      }\n    }\n  }, {\n    key: \"closeToast\",\n    value: function closeToast(reason) {\n      clearTimeout(this.closeTimeout);\n\n      _reactNative.Animated.timing(this.state.fadeAnim, {\n        toValue: 0,\n        duration: 200\n      }).start(this.closeModal.bind(this, reason));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (this.state.modalVisible) {\n        return _react2.default.createElement(_reactNative.Animated.View, {\n          style: this.getToastStyle(),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 105\n          }\n        }, _react2.default.createElement(_Toast.Toast, {\n          style: this.state.style,\n          danger: this.state.type == \"danger\" ? true : false,\n          success: this.state.type == \"success\" ? true : false,\n          warning: this.state.type == \"warning\" ? true : false,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 106\n          }\n        }, _react2.default.createElement(_Text.Text, {\n          style: this.state.textStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112\n          }\n        }, this.state.text), this.state.buttonText && _react2.default.createElement(_Button.Button, {\n          style: this.state.buttonStyle,\n          onPress: function onPress() {\n            return _this2.closeToast('user');\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 114\n          }\n        }, _react2.default.createElement(_Text.Text, {\n          style: this.state.buttonTextStyle,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 118\n          }\n        }, this.state.buttonText))));\n      } else return null;\n    }\n  }], [{\n    key: \"show\",\n    value: function show(_ref2) {\n      var config = _objectWithoutProperties(_ref2, []);\n\n      this.toastInstance._root.showToast({\n        config: config\n      });\n    }\n  }, {\n    key: \"hide\",\n    value: function hide() {\n      if (this.toastInstance._root.getModalState()) {\n        this.toastInstance._root.closeToast(\"functionCall\");\n      }\n    }\n  }]);\n\n  return ToastContainer;\n}(_react.Component);\n\nToastContainer.propTypes = _extends({}, _reactNative.ViewPropTypes, {\n  style: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.number, _propTypes2.default.array])\n});\nvar StyledToastContainer = (0, _nativeBaseShoutemTheme.connectStyle)(\"NativeBase.ToastContainer\", {}, _mapPropsToStyleNames2.default)(ToastContainer);\nexports.ToastContainer = StyledToastContainer;","map":null,"metadata":{},"sourceType":"script"}